""" 
Pydantic Models for the Openwhisk API schemas 
These models can be used to form a generic request
which is compliant to openwhisk. 

This file was generated from the OpenWhisk swagger file.
"""
# generated by datamodel-codegen:
#   filename:  openwhisk-swagger.yaml
#   timestamp: 2021-07-02T15:30:56+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr


class Model(BaseModel):
    __root__: Any


class KeyValue(BaseModel):
    key: Optional[str] = None
    value: Optional[Any] = Field(None, description='Any JSON value')


class ItemId(BaseModel):
    id: str


class PathName(BaseModel):
    path: str
    name: str


class ErrorMessage(BaseModel):
    error: str
    code: Optional[str] = None


class ActionLimits(BaseModel):
    timeout: Optional[int] = Field(60000, description='timeout in milliseconds')
    memory: Optional[int] = Field(256, description='memory in megabytes')
    logs: Optional[int] = Field(10, description='log size in megabytes')
    concurrency: Optional[int] = Field(
        1, description='number of concurrent activations allowed'
    )


class EntityBrief(BaseModel):
    namespace: constr(min_length=1) = Field(..., description='Namespace of the item')
    name: constr(min_length=1) = Field(..., description='Name of the item')
    version: constr(min_length=1) = Field(
        ..., description='Semantic version of the item'
    )
    publish: bool = Field(..., description='Whether to publish the item or not')


class Kind(Enum):
    blackbox = 'blackbox'
    java_8 = 'java:8'
    java_default = 'java:default'
    nodejs_6 = 'nodejs:6'
    nodejs_8 = 'nodejs:8'
    nodejs_10 = 'nodejs:10'
    nodejs_12 = 'nodejs:12'
    nodejs_default = 'nodejs:default'
    php_7_3 = 'php:7.3'
    php_7_4 = 'php:7.4'
    php_default = 'php:default'
    python_2 = 'python:2'
    python_3 = 'python:3'
    python_default = 'python:default'
    ruby_2_5 = 'ruby:2.5'
    ruby_default = 'ruby:default'
    go_1_11 = 'go:1.11'
    go_default = 'go:default'
    sequence = 'sequence'
    swift_4_2 = 'swift:4.2'
    swift_5_1 = 'swift:5.1'
    swift_default = 'swift:default'
    dotnet_2_2 = 'dotnet:2.2'
    dotnet_3_1 = 'dotnet:3.1'
    dotnet_default = 'dotnet:default'
    ballerina_0_990 = 'ballerina:0.990'
    ballerina_default = 'ballerina:default'
    rust_1_34 = 'rust:1.34'
    rust_default = 'rust:default'


class ActionExec(BaseModel):
    kind: Optional[Kind] = Field(None, description='the type of action')
    code: Optional[str] = Field(
        None, description="The code to execute when kind is not 'blackbox'"
    )
    image: Optional[str] = Field(
        None, description="container image name when kind is 'blackbox'"
    )
    main: Optional[str] = Field(None, description='main entrypoint of the action code')
    binary: Optional[bool] = Field(
        None,
        description='Whether the action has a binary attachment or not. This attribute is ignored when creating or updating an action.',
    )
    components: Optional[List[str]] = Field(
        None, description='For sequence actions, the individual action components'
    )


class ActionPayload(BaseModel):
    payload: str = Field(..., description='The payload to pass to the action.')


class Status(Enum):
    active = 'active'
    inactive = 'inactive'
    activating = 'activating'
    deactivating = 'deactivating'


class Rule(BaseModel):
    namespace: constr(min_length=1) = Field(..., description='Namespace of the item')
    name: constr(min_length=1) = Field(..., description='Name of the item')
    version: constr(min_length=1) = Field(
        ..., description='Semantic version of the item'
    )
    publish: bool = Field(..., description='Whether to publish the item or not')
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    status: Optional[Status] = Field(None, description='Status of a rule')
    updated: Optional[int] = Field(None, description='Time when the rule was updated')
    trigger: PathName
    action: PathName


class Status1(Enum):
    active = 'active'
    inactive = 'inactive'
    _ = ''


class RulePut(BaseModel):
    name: Optional[constr(min_length=1)] = Field(None, description='Name of the item')
    version: Optional[constr(min_length=1)] = Field(
        None, description='Semantic version of the item'
    )
    publish: Optional[bool] = Field(
        None, description='Whether to publish the item or not'
    )
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    status: Optional[Status1] = Field(None, description='Status of a rule')
    trigger: Optional[constr(min_length=1)] = Field(
        None, description='Name of the trigger'
    )
    action: Optional[constr(min_length=1)] = Field(
        None, description='Name of the action'
    )


class TriggerPayload(BaseModel):
    payload: str = Field(..., description='The payload of the trigger event.')


class TriggerLimits(BaseModel):
    pass


class PackageBinding(BaseModel):
    namespace: Optional[str] = Field(None, description='Namespace of the item')
    name: Optional[str] = Field(None, description='Name of the item')


class PackageAction(BaseModel):
    name: constr(min_length=1) = Field(..., description='Name of the item')
    version: constr(min_length=1) = Field(
        ..., description='Semantic version of the item'
    )
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None,
        description='parameter bindings included in the context passed to the action',
    )


class StatusCode(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class ActivationBrief(BaseModel):
    namespace: str = Field(..., description='Namespace of the associated item')
    name: str = Field(..., description='Name of the item')
    version: str = Field(..., description='Semantic version of the item')
    publish: bool = Field(..., description='Whether to publish the item or not')
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    activationId: str = Field(..., description='Id of the activation')
    start: int = Field(..., description='Time when the activation began')
    end: Optional[int] = Field(None, description='Time when the activation completed')
    duration: Optional[int] = Field(
        None, description='How long the invocation took, in millisecnods'
    )
    cause: Optional[str] = Field(
        None, description='the activation id that caused this activation'
    )
    statusCode: Optional[StatusCode] = Field(None, description='The status code')


class StatusCode1(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class ActivationId(BaseModel):
    activationId: str


class ActivationIds(BaseModel):
    ids: Optional[List[ActivationId]] = Field(
        None, description='Array of activation ids'
    )


class Result(BaseModel):
    status: str


class ActivationInfo(BaseModel):
    id: Optional[constr(min_length=1)] = Field(None, description='Activation id')
    result: Optional[Result] = Field(None, description='Activation result')
    stdout: Optional[str] = Field(None, description='Standard output from activation')
    stderr: Optional[str] = Field(None, description='Standard error from activation')


class ActivationLogs(BaseModel):
    logs: Optional[List[str]] = Field(
        None, description='Interleaved standard output and error of an activation'
    )


class ActivationStderr(BaseModel):
    stderr: Optional[str] = Field(None, description='Standard error of an activation')


class ActivationResult(BaseModel):
    status: Optional[str] = Field(None, description='Exit status of the activation')
    result: Optional[Any] = Field(
        None, description='The return value from the activation'
    )
    success: Optional[bool] = Field(
        None, description='Whether the activation was successful or not'
    )
    size: Optional[int] = Field(None, description='Size of response')


class ProviderTrigger(BaseModel):
    name: constr(min_length=1) = Field(..., description='Name of the trigger')


class ProviderAction(BaseModel):
    name: constr(min_length=1) = Field(..., description='Name of the action')


class ProviderBinding(BaseModel):
    name: constr(min_length=1) = Field(..., description='Name of the binding')


class Provider(BaseModel):
    name: constr(min_length=1) = Field(..., description='Name of the provider')
    publish: Optional[bool] = Field(
        None, description='Whether to publish the provider or not'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None,
        description='parameter bindings included in the context passed to the provider',
    )


class Action(BaseModel):
    namespace: constr(min_length=1) = Field(..., description='Namespace of the item')
    name: constr(min_length=1) = Field(..., description='Name of the item')
    version: constr(min_length=1) = Field(
        ..., description='Semantic version of the item'
    )
    publish: bool = Field(..., description='Whether to publish the item or not')
    exec: ActionExec
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None,
        description='parameter bindings included in the context passed to the action',
    )
    limits: ActionLimits
    updated: Optional[int] = Field(None, description='Time when the action was updated')


class ActionPut(BaseModel):
    namespace: Optional[constr(min_length=1)] = Field(
        None, description='Namespace of the item'
    )
    name: Optional[constr(min_length=1)] = Field(None, description='Name of the item')
    version: Optional[constr(min_length=1)] = Field(
        None, description='Semantic version of the item'
    )
    publish: Optional[bool] = Field(
        None, description='Whether to publish the item or not'
    )
    exec: Optional[ActionExec] = None
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None,
        description='parameter bindings included in the context passed to the action',
    )
    limits: Optional[ActionLimits] = None


class Trigger(BaseModel):
    namespace: constr(min_length=1) = Field(..., description='Namespace of the item')
    name: constr(min_length=1) = Field(..., description='Name of the item')
    version: constr(min_length=1) = Field(
        ..., description='Semantic version of the item'
    )
    publish: bool = Field(..., description='Whether to publish the item or not')
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None, description='parameter bindings for the trigger'
    )
    limits: Optional[TriggerLimits] = None
    rules: Optional[Dict[str, Any]] = Field(
        None, description='rules associated with the trigger'
    )
    updated: Optional[int] = Field(
        None, description='Time when the trigger was updated'
    )


class TriggerPut(BaseModel):
    namespace: Optional[constr(min_length=1)] = Field(
        None, description='Namespace of the item'
    )
    name: Optional[constr(min_length=1)] = Field(None, description='Name of the item')
    version: Optional[constr(min_length=1)] = Field(
        None, description='Semantic version of the item'
    )
    publish: Optional[bool] = Field(
        None, description='Whether to publish the item or not'
    )
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None,
        description='parameter bindings included in the context passed to the trigger',
    )
    limits: Optional[TriggerLimits] = None


class Package(BaseModel):
    namespace: constr(min_length=1) = Field(..., description='Namespace of the item')
    name: constr(min_length=1) = Field(..., description='Name of the item')
    version: constr(min_length=1) = Field(
        ..., description='Semantic version of the item'
    )
    publish: bool = Field(..., description='Whether to publish the item or not')
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None, description='parameter for the package'
    )
    binding: Optional[PackageBinding] = None
    actions: Optional[List[PackageAction]] = Field(
        None, description='Actions contained in this package'
    )
    feeds: Optional[List[Dict[str, Any]]] = Field(
        None, description='Feeds contained in this package'
    )
    updated: Optional[int] = Field(
        None, description='Time when the package was updated'
    )


class PackagePut(BaseModel):
    namespace: Optional[constr(min_length=1)] = Field(
        None, description='Namespace of the item'
    )
    name: Optional[constr(min_length=1)] = Field(None, description='Name of the item')
    version: Optional[constr(min_length=1)] = Field(
        None, description='Semantic version of the item'
    )
    publish: Optional[bool] = Field(
        None, description='Whether to publish the item or not'
    )
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    parameters: Optional[List[KeyValue]] = Field(
        None, description='parameter for the package'
    )
    binding: Optional[PackageBinding] = None


class Activation(BaseModel):
    namespace: str = Field(..., description='Namespace of the associated item')
    name: str = Field(..., description='Name of the item')
    version: str = Field(..., description='Semantic version of the item')
    publish: bool = Field(..., description='Whether to publish the item or not')
    annotations: Optional[List[KeyValue]] = Field(
        None, description='annotations on the item'
    )
    subject: str = Field(..., description='The subject that activated the item')
    activationId: str = Field(..., description='Id of the activation')
    start: int = Field(..., description='Time when the activation began')
    end: Optional[int] = Field(None, description='Time when the activation completed')
    duration: Optional[int] = Field(
        None, description='How long the invocation took, in millisecnods'
    )
    response: ActivationResult
    logs: List[str] = Field(..., description='Logs generated by the activation')
    cause: Optional[str] = Field(
        None, description='the activation id that caused this activation'
    )
    statusCode: Optional[StatusCode1] = Field(None, description='The status code')
